---
import MainLayout from "@layouts/Main.astro";
import { type Props as BlogProps } from "@layouts/Post.astro";

import "@assets/styles/posts.scss";

import Container from "@components/Container.astro";
import DateTime from "@components/DateTime.astro";
import Input from "@components/Input.astro";
import SectionTitle from "@components/SectionTitle.astro";

import type { MarkdownInstance } from "astro";

type PostPage = MarkdownInstance<BlogProps["frontmatter"]>;

let posts = (Object.values(import.meta.glob("./posts/**/*.mdx", { eager: true })) as PostPage[]).sort(
  (a, b) => +new Date(b.frontmatter.pubDate) - +new Date(a.frontmatter.pubDate),
);

if (process.env.NODE_ENV !== "development") {
  posts = posts.filter(x => x.frontmatter.wip !== true);
}
---

<MainLayout isPostsPage={true}>
  <Container tag="main">
    <SectionTitle id="posts-section">Posts</SectionTitle>

    <Input id="query" placeholder="Search posts..." type="search" name="q" />
    <ul
      id="posts"
      data-posts={JSON.stringify(
        posts.map(x => ({
          title: x.frontmatter.title,
          url: x.url,
          pubDate: x.frontmatter.pubDate,
          tags: x.frontmatter.tags,
          ...(x.frontmatter.wip ? { wip: true } : {}),
        })),
      )}
    >
      {
        posts.map(post => (
          <li data-wip={post.frontmatter.wip}>
            <span class="metadata">
              {post.frontmatter.wip && <span class="wip">WIP</span>}
              <DateTime date={post.frontmatter.pubDate} />
            </span>
            <a href={post.url}>{post.frontmatter.title}</a>
          </li>
        ))
      }
    </ul>
  </Container>

  <template id="post">
    <li>
      <span class="metadata">
        <span class="wip">WIP</span>
        <DateTime />
      </span>
      <a></a>
    </li>
  </template>
</MainLayout>

<script>
  const postsEl = document.getElementById("posts")!;
  const posts: { title: string; url: string; pubDate: string; tags: string[] }[] = JSON.parse(postsEl.dataset.posts!);

  const queryInput = document.getElementById("query") as HTMLInputElement;

  const postTemplate = document.getElementById("post")! as HTMLTemplateElement;

  function replacePostsContent(posts: { title: string; url: string; pubDate: string; tags: string[] }[]) {
    postsEl.innerHTML = "";
    posts.forEach(addPost);
  }

  function initSearch() {
    queryInput.focus();
    queryInput.addEventListener("input", e => {
      let query = (e.target as HTMLInputElement).value;
      query = query.trim().toLowerCase();
      updateURLState();
      if (!query) return replacePostsContent(posts);

      const found = posts.filter(
        p =>
          p.title.toLowerCase().search(query.toLowerCase()) > -1 ||
          p.tags.find(t => t.toLowerCase().search(query.toLowerCase()) > -1),
      );
      replacePostsContent(found);
    });
    setFromLocation();
  }

  function setFromLocation() {
    const url = new URL(location.href);
    const query = url.searchParams.get("q") || url.searchParams.get("query") || url.searchParams.get("search");
    if (!query) return;
    queryInput.value = query || "";
    queryInput.dispatchEvent(new Event("input"));
  }

  function updateURLState() {
    const url = new URL(location.href);
    const q = queryInput.value.trim();
    q ? url.searchParams.set("q", q) : url.searchParams.delete("q");
    window.history.replaceState({}, "", url);
  }

  function addPost(post: { title: string; url: string; pubDate: string; tags: string[]; wip?: boolean }) {
    const postEl = postTemplate.content.cloneNode(true) as HTMLTemplateElement;

    const anchor = postEl.querySelector("a") as HTMLAnchorElement;
    const metadata = postEl.querySelector(".metadata") as HTMLTimeElement;
    const time = postEl.querySelector("time") as HTMLTimeElement;
    const wip = postEl.querySelector(".wip") as HTMLSpanElement;

    anchor.href = post.url;
    anchor.textContent = post.title;
    time.dateTime = post.pubDate.slice(0, 10);
    time.textContent = new Date(post.pubDate).toLocaleDateString("en-US", {
      month: "long",
      day: "numeric",
      year: "numeric",
    });

    if (!post.wip) {
      metadata.removeChild(wip);
    }

    postsEl.appendChild(postEl);
  }

  initSearch();
</script>

<style lang="scss">
  @use "../assets/styles/mixins.scss" as *;

  :global(main) {
    --min-height-base: 96dvh;
    min-height: calc(var(--min-height-base) - var(--nav-height) - var(--footer-height) - 1px);

    @include tablet-down {
      --min-height-base: 98dvh;
    }
  }

  ul {
    margin: 0;
    list-style: none;

    li {
      margin-block: 3rem;
      text-align: center;

      a {
        font-size: 1.5rem;
        font-weight: bold;
        text-decoration: none;

        transition: scale ease-in 200ms;

        @include animate-background-gradient($color: var(--gradient-primary), $increase-x-by: 1.5, $duration: 5s);
        animation-play-state: paused;

        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;

        &:hover {
          scale: 1.01;
          animation-play-state: running;
        }
      }

      .metadata {
        display: flex;
        flex-direction: column;
        color: var(--subtext0);
        font-size: 1rem;
        margin-bottom: 0.3rem;

        .wip {
          color: var(--subtext1);
          font-size: 0.8rem;
        }
      }
    }
  }
</style>
