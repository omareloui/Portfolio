---
export interface Props {
  class?: string;
}

const { class: className } = Astro.props;
---

<div class:list={["hero-3d", className]}></div>

<style lang="scss">
  @use "../assets/styles/mixins.scss" as *;

  .hero-3d {
    pointer-events: none;
  }
</style>

<script>
  import * as THREE from "three";
  import * as openSimplexNoise from "open-simplex-noise";

  import sphereVertex from "@assets/glsl/sphere_vertex.glsl";
  import sphereFragment from "@assets/glsl/sphere_fragment.glsl";

  import { getStyle } from "src/utils/style";

  const PLANE_COLOR = 0x898989;

  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(
    75,
    innerWidth / innerHeight,
    0.1,
    1000
  );
  camera.position.set(0, 0, 6);

  /// Renderer {{{
  const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
  renderer.setSize(innerWidth, innerHeight);

  const parent = document.querySelector(".hero-3d") as HTMLElement;
  parent.appendChild(renderer.domElement);
  /// }}}

  const v3 = new THREE.Vector3();

  /// Plane {{{
  const planeGeometry = new THREE.BoxGeometry(8, 8, 0, 12, 12, 1);
  planeGeometry.translate(0, 0, -2);

  const planeGeometryPositionData: THREE.Vector3[] = [];
  const planeGeometryPosition = planeGeometry.attributes
    .position as THREE.BufferAttribute;

  for (let i = 0; i < planeGeometryPosition.count; i++) {
    v3.fromBufferAttribute(planeGeometryPosition, i);
    planeGeometryPositionData.push(v3.clone());
  }
  const planeMesh = new THREE.MeshBasicMaterial({
    color: PLANE_COLOR,
    wireframe: true,
  });
  const plane = new THREE.Mesh(planeGeometry, planeMesh);
  scene.add(plane);
  /// }}}

  /// Sphere {{{
  const sphereGeometry = new THREE.SphereGeometry(1.5, 100, 100);
  const sphereGeometryPositionData: THREE.Vector3[] = [];
  const sphereGeometryPosition = sphereGeometry.attributes
    .position as THREE.BufferAttribute;

  for (let i = 0; i < sphereGeometryPosition.count; i++) {
    v3.fromBufferAttribute(sphereGeometryPosition, i);
    sphereGeometryPositionData.push(v3.clone());
  }

  const sphereMesh = new THREE.ShaderMaterial({
    uniforms: {
      colorA: {
        // eslint-disable-next-line
        // @ts-ignore
        type: "vec3",
        value: new THREE.Vector3(1.0, 0.5, 1.0),
      },
    },
    vertexShader: sphereVertex,
    fragmentShader: sphereFragment,
  });

  const sphere = new THREE.Mesh(sphereGeometry, sphereMesh);
  scene.add(sphere);
  /// }}}

  const noise = openSimplexNoise.makeNoise4D(Date.now());
  const clock = new THREE.Clock();

  function onResize() {
    renderer.setSize(0, 0);

    const isOnTabet = innerWidth > 768;
    const isOnDesktop = innerWidth > 1024;

    let width;
    let height;

    const contentEl = document.querySelector(
      "section.hero .hero__main"
    ) as HTMLElement;

    if (isOnTabet) {
      width = parent.clientWidth;
      height = contentEl.clientHeight * 1.5;
      if (isOnDesktop) {
        camera.position.setX(-2.4);
        camera.position.setZ(7);
      } else {
        camera.position.setZ(6);
        camera.position.setX(-1);
      }
    } else {
      width = getStyle(contentEl, "width");
      height = contentEl.clientHeight * 1.2;
      camera.position.setX(0);
      camera.position.setZ(9);
    }

    camera.aspect = width / height;
    camera.updateProjectionMatrix();
    renderer.setSize(width, height);
  }

  window.addEventListener("resize", onResize);

  /// Intersection {{{
  let shouldPause = false;
  const observer = new IntersectionObserver(onIntersection, {});

  observer.observe(parent);

  function onIntersection(entries: IntersectionObserverEntry[]) {
    entries.forEach(e => {
      if (e.isIntersecting) shouldPause = false;
      else shouldPause = true;
    });
  }
  /// }}}

  renderer.setAnimationLoop(() => {
    if (shouldPause) return;

    const t = clock.getElapsedTime() / 1;

    sphereGeometryPositionData.forEach((p, idx) => {
      let setNoise = noise(p.x, p.y, p.z, t / 4);
      v3.copy(p).addScaledVector(p, setNoise);
      sphereGeometryPosition.setXYZ(idx, v3.x, v3.y, v3.z);
    });
    sphereGeometry.computeVertexNormals();
    sphereGeometryPosition.needsUpdate = true;

    planeGeometryPositionData.forEach((p, idx) => {
      const setNoise = noise(p.x, p.y, p.z, t / 10);
      v3.copy(p).addScaledVector(p, setNoise);
      planeGeometryPosition.setXYZ(idx, v3.x, v3.y, v3.z);
    });
    planeGeometryPosition.needsUpdate = true;
    renderer.render(scene, camera);
  });

  onResize();
</script>
