---
export interface Props {
  size?: string;
  translate?: string;
  translateOnMobile?: string;
  ariaHidden?: boolean;
  parentQuery?: string;
  movingFraction?: number;
  italic?: boolean;
}

const {
  size = "clamp(2.8rem, 10vw, 5rem)",
  translate = "-30% -80%",
  ariaHidden = true,
  parentQuery,
  italic = true,
} = Astro.props;
---

<span
  class:list={["shadow-text", { italic }]}
  aria-hidden={ariaHidden}
  data-parent={parentQuery}
  data-initial-translate={translate}
>
  <slot />
</span>

<script>
  import { relativeTranslate } from "@utils";

  // eslint-disable-next-line
  const shadowElments: NodeListOf<HTMLElement> = document.querySelectorAll(".shadow-text");

  shadowElments.forEach(element => {
    let parent: Element | null;
    const parentQuery = element.dataset.parent;
    const initialTranslate = element.dataset.initialTranslate as string;

    if (!parentQuery) parent = element.parentElement;
    else if (parentQuery === "prev") parent = element.previousElementSibling;
    else if (parentQuery === "next") parent = element.nextElementSibling;
    else parent = element.querySelector(parentQuery);

    if (!parent || !(parent instanceof HTMLElement)) return;

    relativeTranslate(
      [
        {
          element,
          fraction: 4,
          direction: "with-mouse",
          transition: "200ms ease-out",
          initialTranslate,
        },
      ],
      parent,
    );

    setParentStyles();
    function setParentStyles() {
      if (!parent || !(parent instanceof HTMLElement)) return;
      parent.style.display = "relative";
    }
    element.style.translate = initialTranslate;

    parent.addEventListener("pointerenter", onEnterParent);
    parent.addEventListener("pointerleave", onLeaveParent);
    function onEnterParent() {
      element.classList.add("shadow-text--on-parent");
    }
    function onLeaveParent() {
      element.classList.remove("shadow-text--on-parent");
    }
  });
</script>

<style lang="scss" is:global define:vars={{ size }}>
  @use "../assets/styles/mixins.scss" as *;

  .shadow-text {
    position: absolute;

    color: var(--shadow-text);
    font-family: "Playfair Display", sans-serif;
    font-weight: bold;
    font-size: var(--size);

    text-transform: uppercase;
    pointer-events: none;
    user-select: none;

    &--on-parent {
      scale: 1.2;
    }

    &.italic {
      font-style: italic;
    }
  }
</style>
