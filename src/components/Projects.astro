---
import PreviewProject from "@components/PreviewProject.astro";
import SectionWrapper from "@components/SectionWrapper.astro";

import contentful from "contentful";
import { createClient, Asset } from "contentful";

const createClientFunc = import.meta.env.MODE === "development" ? createClient : contentful.createClient;

const client = createClientFunc({
  space: import.meta.env.CONTENTFUL_SPACE_ID!,
  accessToken: import.meta.env.CONTENTFUL_ACCESS_TOKEN!,
});

export interface Project {
  index: number;
  title: string;
  subtitle: string;
  description: string;
  link: string;
  github: string;
  design: string;
  image: Asset;
  technologies: string[];
  images: Asset[] | string[];
  color: string;
  archived: boolean;
}

const { items } = await client.getEntries<Project>();

const projects = items
  .filter(x => !x.fields.archived)
  .map(x => {
    const { fields } = x;
    fields.images = fields.images.map(x => (x as Asset).fields.file.url);
    return fields;
  })
  .sort((a, b) => a.index - b.index);
---

<SectionWrapper id="projects" title="Projects" shadowTitle="Showcase" isOdd={true} class="projects">
  <!-- @ts-ignore -->
  {projects.map(project => <PreviewProject project={project} />)}
</SectionWrapper>

<script>
  const projects = document.querySelectorAll("#projects .project");
  let shown = 0;

  const observer = new IntersectionObserver(onIntersection, {});

  projects.forEach(p => {
    observer.observe(p);
    const el = p as HTMLElement;
    el.style.transition = "var(--main-timing-function) 1.2s";
    hide(el);
  });

  function onIntersection(entries: IntersectionObserverEntry[]) {
    entries.forEach(entry => {
      const target = entry.target as HTMLElement;
      if (entry.isIntersecting) {
        reveal(target);
        observer.unobserve(target);
        shown += 1;
        if (shown === projects.length) observer.disconnect();
      }
    });
  }

  function hide(el: HTMLElement) {
    el.style.opacity = "0";
    el.style.scale = "0.8";
    el.style.translate = "0 150px";
  }
  function reveal(el: HTMLElement) {
    el.style.opacity = "1";
    el.style.scale = "1";
    el.style.translate = "0 0";
  }
</script>

<style lang="scss">
  @use "../assets/styles/mixins.scss" as *;

  .projects {
    display: grid;
    gap: 50px;
  }
</style>
