---
import SectionWrapper from "@components/SectionWrapper.astro";
import { createLinksLink } from "@utils";

const { isOdd = false } = Astro.props;

const RESUME_URL = "https://docs.google.com/document/d/1bnDG2nmA_nEA9bUAqrBCYPAzzlWZh_vcDr4ts7ZApQo/export?format=pdf";

const resume = await fetch(RESUME_URL);
const blob = await resume.blob();
const size = Math.round(blob.size / 1024);
---

<SectionWrapper title="About Me" shadowTitle="Know Me" id="aboutme" isOdd={isOdd}>
  <h3 class="aboutme-title">
    <span class="first-name">Omar</span>
    <span class="last-name">Eloui</span>
    <span class="image">
      <img src="/images/me.webp" alt="Me (Omar Eloui)." />
    </span>
  </h3>

  <div class="aboutme-body">
    <p>
      I'm a web developer based in Egypt with a background in languagesâ€”Spanish and English. I studied at Al-Alsun but
      found my true passion in programming, transitioning from linguistics to crafting code.
    </p>

    <p>
      I started my journey in web development in 2017 when I realized how programming could simplify tasks and solve
      real problems. Since then, I've been building applications and systems that solve real problems. My focus is on
      creating meaningful solutions that make a difference.
    </p>

    <p>
      Outside of development, I'm a leatherworker. You can check out some of my work on Instagram <a
        href={createLinksLink("odin-ig")}
        target="_blank">@odinleatherstore</a
      >. Although I've taken a break from posting, I might be back soon!
    </p>
  </div>

  <div class="aboutme-resume">
    <a href={RESUME_URL} target="_blank">My Resume (pdf {size}kb)</a>
  </div>
</SectionWrapper>

<script>
  import { relativeTranslate } from "@utils";
  const observer = new IntersectionObserver(onIntersection, {
    threshold: 0.2,
  });
  const elements = [
    ...document.querySelectorAll(".aboutme-title :is(.first-name, .last-name, .image)"),
  ] as HTMLElement[];

  observer.observe(document.querySelector("#aboutme")!);

  function onIntersection(entries: IntersectionObserverEntry[]) {
    entries.forEach(e => {
      // if (e.isIntersecting) show();
      // else hide();
      if (!e.isIntersecting) return;
      show();
      observer.disconnect();
    });
  }

  hide();

  function hide() {
    elements.forEach(el => {
      el.style.opacity = "0";
      if (el.classList.contains("first-name")) el.style.translate = "100% 0";
      else if (el.classList.contains("last-name")) el.style.translate = "-100% 0";
      else el.style.translate = "0 50%";
    });
  }
  function show() {
    elements.forEach(el => {
      el.style.translate = "0 0";
      el.style.opacity = "1";
    });
  }

  relativeTranslate(
    [
      {
        element: elements[0] as HTMLElement,
        fraction: 3,
        direction: "with-mouse",
        initialTranslate: "0px 0px",
      },
      {
        element: elements[1] as HTMLElement,
        fraction: 3,
        direction: "against-mouse",
        initialTranslate: "0px 0px",
      },
      {
        element: elements[2] as HTMLElement,
        fraction: 20,
        direction: "against-mouse",
        initialTranslate: "0px 0px",
      },
    ],
    elements[2] as HTMLElement,
  );
</script>

<style lang="scss">
  @use "@assets/styles/mixins.scss" as *;

  .aboutme-title {
    overflow: hidden;
    --overlap: 30px;

    display: grid;
    grid-template-rows: auto calc(var(--overlap) * 0.8) auto var(--overlap) auto;
    justify-items: center;
    font-family: "Playfair Display", sans-serif;
    font-size: 4rem;
    text-transform: uppercase;
    text-align: center;
    letter-spacing: 6px;

    @include tablet-up {
      --overlap: 75px;
      font-size: 9rem;
    }

    > * {
      grid-column: 1 / -1;
    }

    .first-name,
    .last-name {
      pointer-events: none;
    }

    .first-name {
      z-index: 1;
      grid-row: 1 / 3;
    }

    .last-name {
      z-index: 3;
      grid-row: 4 / 6;
    }

    .image {
      z-index: 2;
      grid-row: 2 / 5;
      border-radius: 12px;
      position: relative;
      transition: 1.5s var(--main-timing-function);
      padding: 1px;
      overflow: hidden;
      @include w(clamp(200px, 50%, 400px));

      img {
        @include size(100%);
        border-radius: inherit;
        object-fit: cover;
      }

      &::before {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        background: linear-gradient(180deg, var(--blur-surface-none) 25%, var(--surface0) 95%, var(--surface0) 100%);
        @include size(100% 100%);
        transition: 1s;
      }

      &:hover {
        scale: 1.03;
        translate: 0 calc(-0.8 * var(--overlap));
        border-radius: 0;
        &::before {
          translate: 0 100%;
          opacity: 0;
        }
      }
    }
  }

  .aboutme-body {
    font-size: 1.4rem;
    text-align: center;
    margin-top: 20px;

    p {
      margin: 0.4rem 0;
    }
  }

  .aboutme-resume {
    margin-top: 10px;
    font-size: 1.2rem;
    text-align: center;

    a {
      background: var(--gradient-primary);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-size: 200%;
      background-position: 50% 50%;
    }
  }

  @include tablet-up {
    .aboutme-resume,
    .aboutme-body {
      text-align: start;
    }
  }
</style>
