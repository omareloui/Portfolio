---
import BurgerButton from "@components/BurgerButton.astro";
import Container from "@components/Container.astro";
import Logo from "@components/Logo.astro";
import ShadowText from "@components/ShadowText.astro";
import ThemeSwitch from "@components/ThemeSwitch.astro";
import ShadowSquare from "./ShadowSquare.astro";

const navLinks = [
  { link: "#aboutme", text: "About me" },
  {
    link: "#portfolio",
    text: "Portfolio",
  },
  {
    link: "#contact",
    text: "Contact me",
  },
  // {
  //   link: "#whatiuse",
  //   text: "What I Use",
  // },
];

// const languages = ["en", "es", "ar"];
---

<!-- Mobile {{{  -->
<Container tag="header" class="tablet-down">
  <a class="logo" href="/" aria-label="go home">
    <Logo />
  </a>

  <div class="menu">
    <ShadowText
      size="1.8rem"
      translate="-50% -50%"
      parentQuery="next"
      movingFraction={4}>Menu</ShadowText
    >
    <BurgerButton />
  </div>
</Container>

<div class="tablet-down nav-menu hide">
  <ShadowSquare size="150px" position="20% auto auto 20%" duration="30s" />
  <ShadowSquare size="600px" position="90% auto auto 90%" />
  <Logo class="nav-menu__shadow-logo" color="var(--surface2)" />

  <Container>
    <ul class="links-list">
      {
        navLinks.map(nl => (
          <li>
            <a href={nl.link}>{nl.text}</a>
          </li>
        ))
      }
    </ul>

    <div class="bottom">
      <div class="theme-switch">
        <ThemeSwitch size="1.1rem" />
      </div>
      <!-- TODO: languages -->
    </div>
  </Container>
</div>
<!-- }}}  -->

<!-- Desktop {{{  -->
<header class="tablet-up">
  <Container tag="div">
    <div class="left">
      <ul class="links-list">
        {
          navLinks.map(nl => (
            <li>
              <a href={nl.link}>{nl.text}</a>
            </li>
          ))
        }
      </ul>
    </div>

    <div class="center">
      <a class="logo" href="/" aria-label="go home">
        <Logo />
      </a>
    </div>

    <div class="right">
      <!--
  <div class="languages">
    <ul>
      {languages.map(l => <li>{l}</li>)}
    </ul>
  </div>
  -->
      <div class="theme-switch">
        <ThemeSwitch size="1.3rem" />
      </div>
    </div>
  </Container>
</header>
<!-- }}}  -->

<script>
  type State = "opened" | "closed";

  function updateUI(state: State) {
    const shadowText: HTMLElement | null = document.querySelector(
      "header .shadow-text"
    );
    if (shadowText) {
      if (state === "opened") shadowText.innerText = "Close";
      else shadowText.innerText = "Menu";
    }
  }

  document.addEventListener("navtoggle", () => {
    const navButton: HTMLElement | null =
      document.querySelector("button.burger-menu");
    if (!navButton) throw new Error("Can't find the nav button.");
    const state = navButton.dataset.state;
    if (!state) throw new Error("Can't find the current state.");

    const navMenu: HTMLElement | null = document.querySelector(".nav-menu");
    if (!navMenu) throw new Error("Can't find the menu.");

    state === "opened"
      ? navMenu.classList.remove("hide")
      : navMenu.classList.add("hide");

    updateUI(state as State);
  });
</script>

<style lang="scss">
  @use "../assets/styles/mixins.scss" as *;

  body {
    --nav-height: 60px;
    --nav-background: var(--blur-surface5);
    --nav-blur: 5px;

    position: relative;
    scroll-padding-top: var(--nav-height);

    header,
    .nav-menu {
      z-index: 10000;
      background: var(--nav-background);
      backdrop-filter: blur(var(--nav-blur));
    }
  }

  header {
    position: sticky;
    top: 0;

    .logo {
      display: block;
      @include size(4rem 3rem);
      &:focus {
        border-radius: 2px;
        outline-offset: 5px;
      }
    }
  }

  /// Small Screen {{{
  :global(header:where(.tablet-down)) {
    display: flex;
    align-items: center;
    justify-content: space-between;

    height: var(--nav-height);
  }

  // Nav menu {{
  .nav-menu {
    position: fixed;
    top: var(--nav-height);
    left: 0;

    @include size(100% calc(100vh - var(--nav-height)));

    background: var(--nav-background);
    backdrop-filter: blur(var(--nav-blur));

    transition: opacity 200ms;

    &.hide {
      pointer-events: none;
      user-select: none;
      opacity: 0;
    }

    &__shadow-logo {
      position: absolute;
      z-index: -1;
      opacity: 0.3;
      width: 80%;
      left: 50%;
      translate: -50% 0;
    }

    :global(.container) {
      display: flex;
      @include size(100%);
      flex-direction: column;
      justify-content: space-between;
      padding-block: 50px;
    }

    .links-list {
      text-align: center;
      display: flex;
      flex-direction: column;

      justify-content: space-around;
      min-height: 60vh;

      li a {
        text-decoration: none;
        font-size: 3rem;
      }
    }

    .bottom {
      display: flex;
      justify-content: flex-end;
    }
  }
  // }}
  /// }}}

  /// Large Screen {{{
  header:where(.tablet-up) :global(.container) {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    /* place-items: center; */
    align-items: center;
    gap: 20px;
    padding-block: 10px;

    .left {
      justify-self: start;

      .links-list {
        display: flex;
        gap: 15px;
        li a {
          font-size: 1rem;
          font-weight: bold;
          text-decoration: none;
          display: inline-block;
          text-align: center;
          white-space: nowrap;
        }
      }
    }

    .center {
      justify-self: center;
    }

    .right {
      justify-self: end;
    }
  }
  /// }}}
</style>
