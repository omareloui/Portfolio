---
export interface Props {
  size?: string;
}

const { size = "1.5rem" } = Astro.props;
---

<label class="switch">
  <input
    type="checkbox"
    role="switch"
    class="switch__input"
    aria-label="change current theme"
  />
</label>

<script>
  import { theme, style as styleUtils } from "@utils";

  // eslint-disable-next-line
  const switches: NodeListOf<HTMLElement> =
    document.querySelectorAll(".switch");

  theme.updateFavicon(theme.getCurrentState());
  document.addEventListener("themetoggle", theme.onThemeToggle);

  const switchesMap = new WeakMap();

  switches.forEach(el => {
    theme.loadInitialState(el);

    // TODO: make the drag work with theme change
    // Src: https://github.com/argyleink/gui-challenges/blob/main/switch/index.js

    // prepareForDragging(
    //   el,
    //   theme.inputHandlerFactory(el.querySelector("input") as HTMLInputElement)
    // );
  });

  /// Drag config {{{
  const switchesUIState = {
    activethumb: null as HTMLInputElement | null,
    recentlyDragged: false,
  };

  function getActiveThumb() {
    return switchesUIState.activethumb as HTMLInputElement;
  }

  function dragInit(event: PointerEvent) {
    const el = event.target as HTMLInputElement;
    if (el.disabled) return;
    switchesUIState.activethumb = el;
    switchesUIState.activethumb.addEventListener("pointermove", dragging);
    switchesUIState.activethumb.style.setProperty(
      "--thumb-transition-duration",
      "0s"
    );
  }

  function dragging(event: PointerEvent) {
    if (!switchesUIState.activethumb) return;

    const { thumbsize, bounds, padding } = switchesMap.get(
      switchesUIState.activethumb.parentElement as HTMLLabelElement
    );
    const directionality = styleUtils.getStyle(
      switchesUIState.activethumb,
      "--isLTR"
    );

    const track =
      directionality === -1
        ? switchesUIState.activethumb.clientWidth * -1 + thumbsize + padding
        : 0;

    let pos = Math.round(event.offsetX - thumbsize / 2);

    if (pos < bounds.lower) pos = 0;
    if (pos > bounds.upper) pos = bounds.upper;

    switchesUIState.activethumb.style.setProperty(
      "--thumb-position",
      `${track + pos}px`
    );
  }

  function dragEnd(e: Event, changeHandler: (e: Event) => void) {
    if (!switchesUIState.activethumb) return;

    switchesUIState.activethumb.checked = determineChecked();
    changeHandler(e);

    const activeThumb = getActiveThumb();
    if (activeThumb.indeterminate) activeThumb.indeterminate = false;

    activeThumb.style.removeProperty("--thumb-transition-duration");
    activeThumb.style.removeProperty("--thumb-position");
    activeThumb.removeEventListener("pointermove", dragging);
    switchesUIState.activethumb = null;

    padRelease();
  }

  function padRelease() {
    switchesUIState.recentlyDragged = true;

    setTimeout(() => {
      switchesUIState.recentlyDragged = false;
    }, 300);
  }

  function preventBubbles(event: Event) {
    if (switchesUIState.recentlyDragged) {
      event.preventDefault();
      event.stopPropagation();
    }
  }

  function labelClick(event: MouseEvent, handler: (e: Event) => void) {
    const target = event.target as HTMLLabelElement;
    const checkbox = target.querySelector("input") as HTMLInputElement;
    if (
      switchesUIState.recentlyDragged ||
      !target.classList.contains("switch") ||
      checkbox.disabled
    )
      return;

    checkbox.checked = !checkbox.checked;
    handler(event);
    event.preventDefault();
  }

  function determineChecked() {
    const activeThumb = getActiveThumb();
    const labelEl = activeThumb.parentElement as HTMLLabelElement;
    const { bounds } = switchesMap.get(labelEl);
    let curpos = Math.abs(
      parseInt(activeThumb.style.getPropertyValue("--thumb-position"))
    );
    if (!curpos) {
      curpos = activeThumb.checked ? bounds.lower : bounds.upper;
    }
    return curpos >= bounds.middle;
  }

  function prepareForDragging(
    element: HTMLElement,
    changeHandler: (e: Event) => void
  ) {
    const checkbox = element.querySelector("input") as HTMLInputElement;
    const thumbsize = styleUtils.getPseudoStyle(checkbox, "width");
    const padding =
      styleUtils.getStyle(checkbox, "padding-left") +
      styleUtils.getStyle(checkbox, "padding-right");

    checkbox.addEventListener("pointerdown", dragInit);
    checkbox.addEventListener("pointerup", e => dragEnd(e, changeHandler));
    checkbox.addEventListener("click", preventBubbles);
    checkbox.addEventListener("click", changeHandler);
    element.addEventListener("click", e => labelClick(e, changeHandler));

    switchesMap.set(element, {
      thumbsize,
      padding,
      bounds: {
        lower: 0,
        middle: (checkbox.clientWidth - padding) / 4,
        upper: checkbox.clientWidth - thumbsize - padding,
      },
    });
  }

  addEventListener("pointerup", event => {
    if (!switchesUIState.activethumb) return;
    const handler = theme.inputHandlerFactory(switchesUIState.activethumb);
    dragEnd(event, handler);
  });
  /// }}}
</script>

<style lang="scss" define:vars={{ size }}>
  .switch {
    --thumb-size: var(--size);
    --thumb-image: url("/icons/theme-light.svg");

    --track-size: calc(var(--thumb-size) * 2.5);
    --track-padding: 3px;

    --track-color: var(--subtext1);

    --thumb-color: var(--gradient-primary);
    --thumb-color-highlight: var(--highlight);

    --isLTR: 1;

    /* display: inline-block; */
    width: min-content;

    cursor: pointer;
    user-select: none;
    -webkit-tap-highlight-color: transparent;

    :root[theme="dark"] & {
      --thumb-image: url("/icons/theme-dark.svg");
    }

    &:dir(rtl) {
      --isLTR: -1;
    }

    &__input {
      --thumb-position: 0%;
      --thumb-transition-duration: 0.25s;

      padding: var(--track-padding);
      background: var(--track-color);
      inline-size: var(--track-size);
      block-size: var(--thumb-size);
      border-radius: var(--track-size);

      appearance: none;
      pointer-events: none;
      touch-action: pan-y;
      border: none;
      outline-offset: 5px;
      box-sizing: content-box;

      flex-shrink: 0;
      display: grid;
      align-items: center;
      grid: [track] 1fr / [track] 1fr;

      transition: background-color 0.25s ease;

      &::after,
      &::before {
        content: "";
        cursor: pointer;
        pointer-events: auto;
        grid-area: track;
        inline-size: var(--thumb-size);
        block-size: var(--thumb-size);
        border-radius: 50%;
        transform: translateX(var(--thumb-position));

        @media (prefers-reduced-motion: no-preference) {
          transition: transform var(--thumb-transition-duration) ease,
            box-shadow 0.25s ease;
        }
      }

      &::before {
        --highlight-size: 0;
        background: var(--thumb-color);
        box-shadow: 0 0 0 var(--highlight-size) var(--thumb-color-highlight);
      }

      &::after {
        background: var(--thumb-image) no-repeat center / 75%;
      }

      &:not(:disabled):hover::before {
        --highlight-size: 0.5rem;
      }

      &:checked {
        background: var(--track-color);
        --thumb-position: calc((var(--track-size) - 100%) * var(--isLTR));
      }

      &:indeterminate {
        --thumb-image: url("/icons/theme-auto.svg");
        --thumb-position: calc(
          calc(calc(var(--track-size) / 2) - calc(var(--thumb-size) / 2)) *
            var(--isLTR)
        );
      }
    }
  }
</style>
